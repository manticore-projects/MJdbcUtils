import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask
import com.nwalsh.gradle.saxon.SaxonXsltTask

buildscript {
    dependencies {
        classpath group: 'net.sf.saxon', name: 'Saxon-HE', version: 'latest.release'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'

    id 'jacoco'
    id 'com.github.kt3k.coveralls' version "latest.release"
    id 'pmd'
    id 'checkstyle'

    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "latest.release"
    id "com.diffplug.spotless" version "latest.release"
    id "com.github.hierynomus.license" version "latest.release"
    id "com.nwalsh.gradle.saxon.saxon-gradle" version "latest.release"
    id 'biz.aQute.bnd.builder' version "latest.release"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

configurations {
    xmlDoclet
}

dependencies {
    api 'com.github.jsqlparser:jsqlparser:5.3+'
    api 'org.apache.commons:commons-collections4:4.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.12.2'
    testImplementation 'com.h2database:h2:2.+'
    xmlDoclet 'com.manticore-projects.tools:xml-doclet:+'
}

def getVersion = { boolean considerSnapshot ->
    Integer major = 0
    Integer minor = 0
    Integer patch = null
    Integer build = null
    String commit = null
    String snapshot = ""

    def versionStr = providers.exec {
        commandLine "git", "--no-pager", "-C", project.projectDir,  "describe", "--tags", "--always", "--dirty=-SNAPSHOT"
    }.standardOutput.asText.get().trim()

    def pattern = /(?<major>\d*)\.(?<minor>\d*)(\.(?<patch>\d*))?(-(?<build>\d*)-(?<commit>[a-zA-Z\d]*))?/
    def matcher = versionStr =~ pattern

    if (matcher.find()) {
        major = matcher.group('major') as Integer ?: 0
        minor = matcher.group('minor') as Integer ?: 0
        patch = matcher.group('patch') as Integer ?: null
        build = matcher.group('build') as Integer ?: null
        commit = matcher.group('commit') ?: null
    }

    if (considerSnapshot && (versionStr.endsWith('SNAPSHOT') || build != null)) {
        minor++
        if (patch != null) patch = 0
        snapshot = "-SNAPSHOT"
    }

    return patch != null
            ? "${major}.${minor}.${patch}${snapshot}"
            : "${major}.${minor}${snapshot}"
}

// for publishing a release, call Gradle with Environment Variable RELEASE:
// RELEASE=true gradle :publish
version = getVersion( !System.getenv("RELEASE") )
group 'com.manticore-projects.jdbc'
description = 'Java Library for Named Parameters (e.g. :Customer_Id ) in Queries or DML/DDL statements.'

java {
    withSourcesJar()
    withJavadocJar()
    sourceCompatibility(JavaVersion.VERSION_11)
    targetCompatibility(JavaVersion.VERSION_11)
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.addBooleanOption("Xdoclint:none", true)
}

tasks.register('xmldoc', Javadoc) {
    def outFile =  reporting.file(
            version.endsWith("-SNAPSHOT")
                    ? "xmlDoclet/javadoc_snapshot.xml"
                    : "xmlDoclet/javadoc_stable.xml"
    )

    def rstFile =  reporting.file(
            version.endsWith("-SNAPSHOT")
                    ? "xmlDoclet/javadoc_snapshot.rst"
                    : "xmlDoclet/javadoc_stable.rst"
    )

    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath

    title = "API $version"
    destinationDir = reporting.file("xmlDoclet")
    options.docletpath = configurations.xmlDoclet.files as List
    options.doclet = "com.manticore.tools.xmldoclet.XmlDoclet"
    options.addBooleanOption("rst", true)
    options.addBooleanOption("withFloatingToc", true)
    options.addStringOption("basePackage", "com.manticore.jdbc")
    options.addStringOption("filename", outFile.getName())

    dependsOn(compileJava)
    doLast {
        copy {
            from rstFile
            into layout.projectDirectory.dir("src/site/sphinx/").asFile
        }
    }
}


test {
    useJUnitPlatform()
    jacoco {
        excludes = ['net/sf/jsqlparser/parser/CCJSqlParserTokenManager']
    }
}

license {
    header = project.file('LICENSE')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'manticore-projects Co. Ltd.'
    ext.email = 'support@manticore-projects.com'

    strictCheck = false
    ignoreFailures = true
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.96
            }
            excludes = [
            ]
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'
                maximum = 20
                }
            excludes = [
            ]
        }
    }
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}


pmd {
    consoleOutput = true
    sourceSets = [sourceSets.main, sourceSets.test]
    
    // clear the ruleset in order to use configured rules only
    ruleSets = []
    
    //rulesMinimumPriority = 1
    
    ruleSetFiles = files("config/pmd/ruleset.xml")
    
    pmdMain {
        excludes = [
                "build/generated/*"
        ]
    }
}

checkstyle {
    sourceSets = [sourceSets.main, sourceSets.test]
    configFile =rootProject.file('config/checkstyle/checkstyle.xml')
}

spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    ratchetFrom 'origin/main'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.rst', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        leadingTabsToSpaces(4) // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        leadingTabsToSpaces(4)
        eclipse().configFile('config/formatter/eclipse-java-google-style.xml')
    }
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}


publish {
    dependsOn(check)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'MJdbcUtils'
                description = 'Java Library for Named Parameters (e.g. :Customer_Id ) in Queries or DML/DDL statements.'
                url = 'https://manticore-projects.com/MJdbcUtils/index.html'
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'are'
                        name = 'Andreas Reichel'
                        email = 'andreas@manticore-projects.com'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:manticore-projects/MJdbcUtils.git'
                    developerConnection = 'scm:git@github.com:manticore-projects/MJdbcUtils.git'
                    url = 'https://github.com/manticore-projects/MJdbcUtils'
                }
            }
        }
    }
    repositories {
        maven {
            name "ossrh"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl= "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}



tasks.register('gitChangelogTask', GitChangelogTask) {
    fromRepo = file("$projectDir")
    file = new File("${projectDir}/src/site/sphinx/changelog.md")
}
